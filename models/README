This directory contains scripts for generating comaparative models of human kinase domains onto all kinase domain structures in the PDB.

MANIFEST

Main pipeline:

compile-targets-from-xml.py - compile target sequences from kinDB.xml file
retrieve-templates-uniprot.py - retrieve templates from PDB crossrefs contained in UniProt entries
build-models-multiprocessing.py - use MODELLER to build comparative models (alignments via clustal-omega), using multiprocessing to parallelize over CPUs
sort-by-sequence-identity.py - compile a list sorted by sequence identity (in decreasing order)
cluster-models.py - used for excluding models with high structural similarity
align-models.py - script to align comparative models onto model built from highest sequence identity template for visual inspection of model quality
render-models.py - script to render comparative models into contact sheets for visual inspection
simulate-implicit-mpi4py.py - refine models by implicit solvent simulation to generate refined-implicit.pdb
solvate-models.py - determine number of waters that optimally go in each model simulation box and write to 'nwaters.txt'
determine-nwaters.py - determing fixed global number of waters to use
simulate-explicit-mpi4py.py - set up explicit solvent simulations and simulate for 10 ps under NPT conditions, serializing to XML files
package-for-fah-openmm.py - package OpenMM XML files for FAH 
test-openmm-project.py - short MD simulations to make sure FAH CLONEs were packaged correctly
tar-models-mpi4py.py - create compressed archive of modelling data
tar-projects-mpi4py.py - create compressed archive of FAH projects

Scripts for testing a project:

scripts/error_checking
  check-simulate-implicit-mpi4py.py - runs only 1 ps of implicit solvent MD on each model, and outputs PDB files from the hydrogen-addition and EM steps
  check-clashes.py - checks for interatomic clashes (based on a minimum distance cutoff) and outputs data to clashes.xml file. Only works on implicit MD step for now

Unused or deprecated scripts:

scripts/attic - unused or deprecated scripts
  compile-targets.py - compile target sequences into an index and alignment file from kinase Excel database
  build-models.py - script to build comparative models of human kinase domains onto kinase structures from the RCSB, using MODELLER auto-align
  retrieve-templates.py - retrieve templates from SCOP using subtree collected with given search terms, checking for template quality

Files and directories generated by scripts:

targets/ - sequence data on targets for modeling
  targets.txt - list of target names
  targets.seg - MODELLER sequence input file for all targets
templates/ - sequence and structure data for templates for modeling
  templates.txt - list of template names
  templates.seg - MODELLER sequence input file for all templates
  structures/ - PDB files for all template structures
models/ - directory of resulting comparative models
  [separate directory for every target name]
    exceptions.out - reported exceptions that occurred during modeling of this target
    min_rmsd.png - histogram of the minimum RMSDs (built using cluster-models.py)
    unique_models.txt - list of models found to be unique by clustering
    [separate directory for each template] 
       model.pdb - MODELLER-generated comparative model
       alignment.ali - MODELLER-generated automatic alignment
       restraints.rsr.gz - MODELLER-generated restraints used to build the comparative model (gzip'ed)
       aligned.pdb - translated and rotated version of model.pdb to match position and orientation of most homologous model
       model.png - image of aligned.pdb rendered by PyMOL
    models.png - image of top 100 models by sequence identity

TEMPLATE RETRIEVAL SUMMARY (retrieve-templates-uniprot.py)

First UniProt is searched for all reviewed (SwissProt) entries for proteins containing a kinase catalytic domain ("pk_domain"), and which have at least one associated PDB structure. Any species is allowed.

The residue span of each pk_domain is stored.

Then the PDB references are extracted from the UniProt entries. These references include the residue span (using UniProt numbering) and chainid of the construct used. This information is compared to the pk_domain residue span to determine whether or not a particular PDB contains the pk_domain. The pk_domain residue span, less 30 residues from each terminus, must be contained within the PDB residue span.

Next we need to go to the PDB structures and extract the coordinates which describe the pk_domain. We also need to save the sequence so that it can be used for alignment against targets. Modeller requires that the sequence exactly matches the residues contained in the structure.

SIFTS residue-level mapping XML files are used to match UniProt resnums to PDB resnums. Residues are only extracted if they are a) observed in the structure, and b) match the equivalent UniProt residue. This means that post-translationally modified or mutated residues (which will have a residueDetail tag containing either "PDB modified" or "Conflict") are not extracted.  If the first or last residues of the pk_domain do not meet these two criteria, then we search as far as 30 residues inwards to find residues which do. Otherwise we discard the structure (the main effect here is the removal of templates which have little observable structure at the termini of the pk_domain). We also calculate the percentage of observable residues, and discard any structures with less than 70% observable residues (the main effect here is the removal of a very small number of PDB chains which are included in the PDB SEQREF but have no observed residues).

The extracted coordinates are saved in the templates/ directory, and the corresponding single-letter sequences are saved to templates/templates.seg.

Each template is given a unique id: [UniProt entry name]_[UniProt AC]_PK_[pk_domain_id]_[PDB code]_[PDB chainid]
* The UniProt entry name includes the species, e.g. ABL1_HUMAN
* pk_domain_id is the 0-based enumeration of the pk_domain. In some kinases there are two pk_domains. Sometimes one may be a pseudokinase domain, but these are not removed. (Pseudokinases are removed as targets, however.)

MODELING PROCEDURE SUMMARY

A set of sequences are modeled onto a number of protein structures with given SCOP domain assignments.

The latest SCOP (1.75B, updated Jan 2013) can be found here:

http://scop.berkeley.edu

First, a SCOP ID or search string is used to determine one or more SCOP root nodes by parsing the node definition file (dir.des.scop.txt), in this case "Protein kinase-like":

http://scop.berkeley.edu/sunid=56111

The SCOP hierarchy definition file (dir.hie.scop.txt) is then parsed to build a list of child nodes in this tree under the compiled root node(s).

A list of the PDB domain entities that match any SCOP child nodes in this list in the classification file (dir.cla.scop.txt) is generated.  These entities encode the PDB ID, chain ID, and domain index.

Any entities not already present are retrieved via the web interface from ASTRAL:

http://scop.berkeley.edu/astral/pdbstyle/

MODELLER is then used in 'automodel' mode to generate alignments and rapidly build structures mapping each desired sequence (in this case, the kinome) onto all structures in the retrieved list.

The sequence identities for each automatically-generated alignment are stored to help estimate the priority with which each structure should be considered.

This approach is that is very general, and can be extended to any other class of proteins we may want to simulate in the future by picking different sequences and SCOP search terms.

TODO

* Consider multiple sequence/structure alignment for superior pairwise templates?


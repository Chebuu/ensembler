# Build comparative models of each kinase domain from all kinase domain structures in the RCSB using MODELLER.
#
# NOTE: This script is no longer used because the auto-alignments generated by MODELLER are poor and serial execution is slow.
#
# John D. Chodera <choderaj@mskcc.org> - 15 Jan 2013
#
# Based on:
# A sample script for fully automated comparative modeling (Ben Webb)
#
# USAGE
#
# python scripts/build-models.py 
#
# PREREQUISITES
#
# * MODELLER
# http://salilab.org/modeller/
#
# TODO
# 
# * Take list of target names or indices as command-line argument

# PARAMETERS

# Process only these targets, if specified.
#process_only_these_targets = False
process_only_these_targets = ['P12931']

#
# GET ABSOLUTE PATHS
#

import os.path

# Input files.
targets_directory = os.path.abspath("targets") # target sequences for modeling
templates_directory = os.path.abspath("templates") # template structures for use in modeling

# Output files.
models_directory = os.path.abspath("models") # directory to organize models, by target

#
# INITIALIZE MODELLER
#

from modeller import *
from modeller.automodel import *    # Load the automodel class

log.verbose()
env = environ()

# directories for input atom files
env.io.atom_files_directory = './:%(models_directory)s:%(templates_directory)s/structures' % vars()

# Use explicit hydrogen atoms.
env.io.hydrogen = True
env.libs.topology.read('${LIB}/top.lib')
env.libs.parameters.read('${LIB}/par.lib')

#
# READ TEMPLATE AND TARGET INDICES
#

targets_index_filename = os.path.join(targets_directory, 'targets.txt')
infile = open(targets_index_filename, 'r')
targets = [ line.strip() for line in infile ]
infile.close()
print "targets:"
print targets

templates_index_filename = os.path.join(templates_directory, 'templates.txt')
infile = open(templates_index_filename, 'r')
templates = [ line.strip() for line in infile ]
infile.close()
print "templates:"
print templates

#aln = alignment(env)
#print "Reading templates..."
#aln.append('%(template_directory)s/templates.seg' % vars())
#templates = [ alignment.code for alignment in aln ]

#
# MERGE TEMPLATES AND TARGETS
#

# TODO: Perform a multiple sequence-structure alignment here?

print "Merging template and target sequences..."
#aln = alignment(env)
#print "Reading templates..."
#aln.append('%(template_directory)s/templates.seg' % vars())
#templates = [ alignment.code for alignment in aln ]
#print "Reading targets..."
#aln.append('targets.seg')
#print "Writing compiled alignment file..."
#aln.write('alignment.seg')
#print "Done."

targets_filename = os.path.join(targets_directory, 'targets.seg')
templates_filename = os.path.join(templates_directory, 'templates.seg')
merged_sequences_filename = os.path.join(models_directory, 'targets-templates.seg')
import commands
commands.getoutput('cat %s %s > %s' % (targets_filename, templates_filename, merged_sequences_filename))

#
# MODEL ALL SEQUENCES ONTO ALL STRUCTURES
#

# TODO: Have target written out as 'target' filename in tmp directory?

# Create exceptions file.
error_filename = os.path.join(models_directory, 'exceptions.out')
outfile = open(error_filename, 'w')
outfile.close()

# Get current working directory.
import os
current_directory = os.getcwd() 

for target in targets:
    
    # Process only specified templates if directed.
    if process_only_these_targets and (target not in process_only_these_targets): continue

    print "-------------------------------------------------------------------------"
    print "Modelling '%s'" % (target)
    print "-------------------------------------------------------------------------"

    # Create directory for target.
    target_directory = os.path.join(models_directory, target)
    if not os.path.exists(target_directory):
        os.makedirs(target_directory)

    # Process all templates.
    for template in templates:
        try:
            print "-------------------------------------------------------------------------"
            print "'%s' => '%s'" % (template, target)
            print "-------------------------------------------------------------------------"

            # Create temporary directory for modeling.
            import os, tempfile
            temporary_directory = tempfile.mkdtemp()
            os.chdir(temporary_directory)

            # Create an all-atom model.
            a = allhmodel(env,
                          # file with template codes and target sequence
                          alnfile  = merged_sequences_filename,
                          # PDB codes of the template
                          knowns   = template,
                          # code of the target
                          sequence = target)
            a.auto_align()                      # get an automatic alignment
            a.make()                            # do homology modeling

            # Retrieve model.
            model_pdbfilename = a.outputs[0]['name']
            target_model = model(env, file=model_pdbfilename)

            # Construct directory to place final models in.
            model_directory = os.path.join(models_directory, target, template)
            if not os.path.exists(model_directory):
                os.makedirs(model_directory)

            # Write model.
            output_pdbfilename = os.path.join(model_directory, 'model.pdb')
            target_model.write(file=output_pdbfilename)

            # Write sequence identity.
            seqid_filename = os.path.join(model_directory, 'sequence-identity.txt')
            outfile = open(seqid_filename, 'w')
            outfile.write('%.1f\n' % target_model.seq_id)
            outfile.close()

            # Copy alignment            
            import shutil
            alignment_filename = os.path.join(model_directory, 'alignment.ali')
            shutil.move(merged_sequences_filename + '.ali', alignment_filename)

            # Copy restraints.
            restraint_filename = os.path.join(model_directory, 'restraints.rsr')
            commands.getoutput('cp %s.rsr %s; gzip %s' % (target, restraint_filename, restraint_filename))

            # Clean up temporary directory.
            os.chdir(current_directory)
            shutil.rmtree(temporary_directory)

        except Exception as e:  
            # If an Exception has occurred, write a note to the exceptions file and keep running.
            outfile = open(error_filename, 'a')
            outfile.write('---------------------------------------------------------------------------------\n')
            outfile.write('Error modeling target %s to template %s.\n' % (target, template))
            outfile.write(str(e) + '\n')
            outfile.close()


